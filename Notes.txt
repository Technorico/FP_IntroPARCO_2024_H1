I noticed that my implementation of matTranspose is faster than my implementation of checksym when the matrix is very small (like 5x5)
valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all ./build/exec
valgrind --tool=cachegrind ./build/exec
sudo perf stat -e cache-misses,cache-references ./build/exec
cat /sys/devices/system/cpu/cpu0/cache/index*/coherency_line_size
/\ For my CPU this is 64B
In options.opt there are the same optimization of -O2, without the -ftree-loop-vectorize and -ftree-slp-vectorize.
They can be turned on together by -ftree-vectorize

gcc -Q --help=optimizer
/*
Description: Sequential implementation of matrix transposition and check of symmetry
Notes: 
    - It is assumed that all the matrices are square and have the same dimensions
    - A value inside a matrix is identified by the tuple (COL, ROW)
DEBUG DEFINE can assume multiple values(0, 1, 2, 3):
    0. Is the default one, the program will not write on stdout
    1. Write on stdout basic information, like times and equality (M == M)
    2. Write the same of 1, plus it visually displays matrices
    3. Write the same of 2, plus the indexes iteration by iteration of the two main functions
*/
